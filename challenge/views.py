from django.views import generic
from django.http import HttpResponseRedirect
from django.shortcuts import render


from rest_framework import viewsets, permissions

from .models import Tracking, Checkpoint
from .forms import EmailForm
from challenge.serializers import CheckpointSerializer, TrackingSerializer


def get_email(request):
    """
    This is an autogenerated form for collecting user emails
    """
    if request.method == 'POST':
        # create a form instance and populate it with data from the request:
        form = EmailForm(request.POST)
        # check whether it's valid:
        if form.is_valid():
            # process the data in form.cleaned_data as required
            # redirect to a new URL:
            return HttpResponseRedirect('/thanks/')

    # if a GET (or any other method) create a blank form
    else:
        form = EmailForm()

    return render(request, 'challenge/email.html', {'form': form})


class TrackingView(generic.ListView):
    """
    A view for returning tracking instances that match the provided email address.
    """
    template_name = 'challenge/tracking.html'
    context_object_name = 'tracking_number_list'

    def get_queryset(self):
        """Return the tracking numbers with the appropriate email"""
        return Tracking.objects.filter(email=self.request.GET['email'])


class DetailView(generic.ListView):
    """
    A view for displaying checkpoints corresponding to a particular tracking object
    """
    template_name = 'challenge/checkpoints.html'
    context_object_name = 'checkpoint_list'

    def get_queryset(self):
        return Checkpoint.objects.filter(tracking_number=self.kwargs['tracking_number'])


class CheckpointViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows checkpoints to be viewed or edited.
    """
    queryset = Checkpoint.objects.all()
    serializer_class = CheckpointSerializer
    permission_classes = [permissions.IsAuthenticated]


class TrackingViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows tracking objects to be viewed or edited.
    """
    queryset = Tracking.objects.all()
    serializer_class = TrackingSerializer
    permission_classes = [permissions.IsAuthenticated]
